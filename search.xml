<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Kafka</title>
      <link href="/blog/2019/03/09/Kafka%E7%AE%80%E4%BB%8B/"/>
      <url>/blog/2019/03/09/Kafka%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="/blog/2019/03/09/Kafka简介/Kafka-logo.png" alt="Kafka-logo"></p><h1 id="Kafka概述"><a href="#Kafka概述" class="headerlink" title="Kafka概述"></a>Kafka概述</h1><p><strong>Kafka官网：</strong><a href="https://kafka.apache.org/" target="_blank" rel="noopener">https://kafka.apache.org/</a></p><ul><li><p>Apache Kafka是一个开源<strong>消息</strong>系统，由Scala写成。是由Apache软件基金会开发的一个开源消息系统项目。</p></li><li><p>Kafka最初是由LinkedIn开发，并于2011年初开源。2012年10月从Apache Incubator毕业。该项目的目标是为处理实时数据提供一个统一、高吞吐量、低延迟的平台。</p></li><li><p><strong>Kafka</strong>是一个分布式消息队列：生产者、消费者的功能。它提供了类似于<strong><strong>JMS</strong></strong>的特性，但是在设计实现上完全不同，此外它并不是<strong><strong>JMS</strong></strong>规范的实现<strong>**。</strong></p></li><li><p>Kafka对消息保存时根据Topic进行归类，发送消息者称为Producer,消息接受者称为Consumer,此外kafka集群有多个kafka实例组成，每个实例(server)成为broker。</p></li><li><p>无论是kafka集群，还是producer和consumer都依赖于<strong>zookeeper</strong>集群保存一些meta信息，来保证系统可用性</p></li></ul><h1 id="kafka组件介绍"><a href="#kafka组件介绍" class="headerlink" title="kafka组件介绍"></a>kafka组件介绍</h1><p>Topic ：消息根据Topic进行归类</p><p>Producer：发送消息者</p><p>Consumer：消息接受者</p><p>broker：每个kafka实例(server) </p><p>Zookeeper：依赖集群保存meta信息。</p><h2 id="Topics组件"><a href="#Topics组件" class="headerlink" title="Topics组件"></a>Topics组件</h2><p>Topic：一类消息，每个topic将被分成多个partition(区)，在集群的配置文件中配置。 </p><p>partition：在存储层面是逻辑append log文件，包含多个segment文件。</p><p>Segement：消息存储的真实文件，会不断生成新的。</p><p>offset：每条消息在文件中的位置（偏移量）。offset为一个long型数字，它是唯一标记一条消息。</p><p><strong>partition</strong></p><p>1.在存储层面是逻辑append log文件，每个partition有多个segment组成。</p><p>2.任何发布到此partition的消息都会被直接追加到log文件的尾部。</p><p>3.每个partition在内存中对应一个index列表，记录每个segment中的第一条消息偏移。这样查找消息的时候，先在index列表中定位消息位置，再读取文件，速度块。</p><p>4.发布者发到某个topic的消息会被均匀的分布到多个part上，broker收到发布消息往对应part的最后一个segment上添加该消息。</p><h1 id="Kafka存储机制"><a href="#Kafka存储机制" class="headerlink" title="Kafka存储机制"></a>Kafka存储机制</h1>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
          <category> Kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
            <tag> 大数据 </tag>
            
            <tag> 搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka</title>
      <link href="/blog/2019/03/09/Kafka%E9%83%A8%E7%BD%B2/"/>
      <url>/blog/2019/03/09/Kafka%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
          <category> Kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
            <tag> 大数据 </tag>
            
            <tag> 搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spark基础</title>
      <link href="/blog/2019/03/09/spark%E5%9F%BA%E7%A1%80/"/>
      <url>/blog/2019/03/09/spark%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="spark基础"><a href="#spark基础" class="headerlink" title="spark基础"></a>spark基础</h3><h4 id="1、目标"><a href="#1、目标" class="headerlink" title="1、目标"></a>1、目标</h4><ul><li>1、掌握spark相关概念</li><li>2、掌握搭建一个spark集群</li><li>3、掌握开发简单的spark应用程序</li></ul><h4 id="2、spark概述"><a href="#2、spark概述" class="headerlink" title="2、spark概述"></a>2、spark概述</h4><p><img src="/blog/2019/03/09/spark基础/spark.png" alt="hello"></p><h5 id="2-1-spark是什么"><a href="#2-1-spark是什么" class="headerlink" title="2.1 spark是什么"></a>2.1 spark是什么</h5><ul><li><strong>Apache Spark™</strong> is a unified analytics engine for large-scale data processing.</li><li>apache的spark是一个针对于大规模数据处理的统一分析引擎</li><li></li></ul><p>spark是基于内存计算的分布式分析引擎，计算速度非常快，这里仅仅只涉及到数据的计算，并没有涉及到数据的存储，后期再使用spark的时候，就需要对接一些外部的数据源（比如HDFS）</p><h5 id="2-2-为什么要学习spark"><a href="#2-2-为什么要学习spark" class="headerlink" title="2.2 为什么要学习spark"></a>2.2 为什么要学习spark</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">由于spark的处理速度比mapreduce快很多，很受企业青睐，所以我今天就重点学习它</span><br></pre></td></tr></table></figure><h5 id="2-3-spark框架的四大特性"><a href="#2-3-spark框架的四大特性" class="headerlink" title="2.3 spark框架的四大特性"></a>2.3 spark框架的四大特性</h5><ul><li><p>1、速度快</p><ul><li><p>spark比mapreduce处理任务在内存中快100倍，在磁盘中快10倍</p></li><li><p>spark比mapreduce速度快的2个主要原因</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">（1） mapreduce任务每一次job的输出结果只能够保存在磁盘中，后续有其他的job需要依赖于前面job的输出结果，这个时候只能够进行大量的磁盘io操作，获取得到。spark任务每一次的job输出结果可以直接保存在内存中，后续有其他的job需要依赖于前面job的输出结果，这个时候就可以直接从内存中获取得到。大大减少磁盘io操作，最后整体上提升性能。</span><br><span class="line"></span><br><span class="line">  hivesql: select name,age,sex  <span class="keyword">from</span> (select * <span class="keyword">from</span><span class="built_in"> user </span>where age &gt;30) </span><br><span class="line">  </span><br><span class="line"> (2) mapreduce任务它是以进程的方式运行在yarn中，比如一个mapreduce任务中，有100个MapTask,这个时候就需要开启100个进程去运行着100个task；spark任务的它是以线程的方式运行在进程中，比如一个spark任务中还是有100个task，后期再运行的时候，可以极端一点，开启一个进程，在这一个进程中运行100个线程即可。 开启一个进程跟开启一个线程的代价肯定是不一样，开启一个进程需要的时间远远高于开启一个线程需要的时间。</span><br></pre></td></tr></table></figure></li></ul></li><li><p>2、易用性</p><ul><li>可以快速开发一个spark应用程序，通过java、scala、python、R、SQL等不同的语言进行代码开发</li></ul></li><li>3、通用性<ul><li>spark框架不在是一个简单的框架，它发展成一个spark的生态系统，它是包括了很多不同的子项目<ul><li>Sparksql</li><li>sparkStreaming</li><li>Mlib</li><li>Graphx</li></ul></li></ul></li><li>4、兼容性<ul><li>spark程序就是一个计算任务，哪里可以给当前这个任务提供计算资源，我们就可以把spark程序提交到哪里去运行<ul><li>standAlone<ul><li>它是spark集群自带的模式，整个任务的资源分配由spark集群中的老大Master节点负责</li></ul></li><li>yarn<ul><li>可以把spark程序提交到yarn中去运行，整个任务的资源分配由yarn中的老大ResouceManager</li></ul></li><li>mesos<ul><li>它也是一个类似于yarn的开源的资源调度框架</li></ul></li></ul></li></ul></li></ul><h4 id="3、spark集群安装部署"><a href="#3、spark集群安装部署" class="headerlink" title="3、spark集群安装部署"></a>3、spark集群安装部署</h4><ul><li><p>1、下载对应的安装包</p><ul><li><a href="http://mirrors.tuna.tsinghua.edu.cn/apache/spark/spark-2.1.3/spark-2.1.3-bin-hadoop2.7.tgz" target="_blank" rel="noopener">http://mirrors.tuna.tsinghua.edu.cn/apache/spark/spark-2.1.3/spark-2.1.3-bin-hadoop2.7.tgz</a></li><li>spark-2.1.3-bin-hadoop2.7.tgz</li></ul></li><li><p>2、规划安装目录</p><ul><li>/export/servers</li></ul></li><li><p>3、上传安装包到服务器中</p></li><li><p>4、解压安装包到指定的规划目录</p><ul><li>tar -zxvf spark-2.1.3-bin-hadoop2.7.tgz -C /export/servers</li></ul></li><li><p>5、重命名解压目录</p><ul><li>mv spark-2.1.3-bin-hadoop2.7 spark</li></ul></li><li><p>6、修改配置文件</p><ul><li><p>进入到spark的安装目录有一个conf文件夹</p><ul><li><p>vim spark-env.sh ( mv spark-env.sh.template  spark-env.sh)</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置java环境变量</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_HOME</span>=/export/servers/jdk</span><br><span class="line"><span class="comment">#指定master的地址</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">SPARK_MASTER_HOST</span>=node1</span><br><span class="line"><span class="comment">#指定master的端口</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">SPARK_MASTER_PORT</span>=7077</span><br></pre></td></tr></table></figure></li><li><p>vim slaves (mv slaves.template slaves)</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">#指定哪些节点是worker</span></span><br><span class="line"><span class="attr">node2</span></span><br><span class="line"><span class="symbol">node3</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>7、配置spark环境变量</p><ul><li><p>vim /etc/profile</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">SPARK_HOME</span>=/export/servers/spark</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$SPARK_HOME/bin:$SPARK_HOME/sbin</span><br></pre></td></tr></table></figure></li></ul></li><li><p>8、分发spark目录和环境变量</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">scp -r spark node2:/export/servers</span><br><span class="line">scp -r spark node3:/export/servers</span><br><span class="line"></span><br><span class="line">scp /etc<span class="built_in">/profile </span>node2:/etc</span><br><span class="line">scp /etc<span class="built_in">/profile </span>node3:/etc</span><br></pre></td></tr></table></figure></li><li><p>9、让所有spark节点的环境变量生效</p><ul><li>可以在所有节点执行<ul><li>source /etc/profile</li></ul></li></ul></li></ul><h4 id="4、spark集群的启动和停止"><a href="#4、spark集群的启动和停止" class="headerlink" title="4、spark集群的启动和停止"></a>4、spark集群的启动和停止</h4><ul><li>1、启动spark集群<ul><li>在主节点执行脚本<ul><li>sbin/start-all.sh</li></ul></li><li>首先在主节点启动了一个Master进程，它是整个spark集群的老大，负责任务的资源分配</li><li>通过slaves文件执行的worker节点来分别启动worker进程</li></ul></li><li>2、停止spark集群<ul><li>在主节点执行脚本<ul><li>sbin/stop-all.sh</li></ul></li></ul></li></ul><h4 id="5、spark集群的web管理界面"><a href="#5、spark集群的web管理界面" class="headerlink" title="5、spark集群的web管理界面"></a>5、spark集群的web管理界面</h4><ul><li>1、启动好spark集群之后<ul><li>可以访问地址<ul><li>master主机名:8080</li></ul></li><li>可以看到spark集群的所有信息<ul><li>spark集群的总的资源信息</li><li>spark集群已经使用的资源信息</li><li>spark集群还剩的资源信息</li><li>spark集群中每一个worker的相关信息</li><li>spark集群中正在运行的任务信息</li><li>spark集群中已经完成的任务信息</li></ul></li></ul></li></ul><h4 id="6、基于zk构建高可用的spark集群"><a href="#6、基于zk构建高可用的spark集群" class="headerlink" title="6、基于zk构建高可用的spark集群"></a>6、基于zk构建高可用的spark集群</h4><ul><li><p>1、事先搭建一个zk集群</p></li><li><p>2、修改配置</p><ul><li><p>vim spark-env.sh</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#把之前手动指定哪一个节点是活着的master这个参数注释掉</span></span><br><span class="line"><span class="comment">#export SPARK_MASTER_HOST=node1</span></span><br><span class="line"><span class="comment">#引入zk，构建高可用的spark集群</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">SPARK_DAEMON_JAVA_OPTS</span>=<span class="string">"-Dspark.deploy.recoveryMode=ZOOKEEPER  -Dspark.deploy.zookeeper.url=node1:2181,n</span></span><br><span class="line"><span class="string">ode2:2181,node3:2181  -Dspark.deploy.zookeeper.dir=/spark"</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>3、分发文件到其他机器</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp spark-env.sh <span class="string">node2:</span><span class="regexp">/export/</span>servers<span class="regexp">/spark/</span>conf</span><br><span class="line">scp spark-env.sh <span class="string">node3:</span><span class="regexp">/export/</span>servers<span class="regexp">/spark/</span>conf</span><br></pre></td></tr></table></figure></li><li><p>4、先启动zk</p></li><li><p>5、启动spark集群</p><ul><li><p>1、可以在任意一台机器来启动一个脚本（前提条件：实现任意2台机器之间的ssh免密登录）</p><ul><li>sbin/start-all.sh</li></ul></li><li><p>2、它会在当前机器启动一个Master进程（活着的master）</p></li><li><p>3、整个spark集群中的worker进程由slaves文件决定</p></li><li><p>4、在其他机器单独启动master</p><ul><li>sbin/start-master.sh</li></ul></li><li><p>master恢复逻辑</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">首先基于引入了zk集群，这个时候整个spark集群中有很多个<span class="literal">master</span>，其中一个<span class="literal">master</span>被选举成活着的<span class="literal">master</span>，它提供服务，后期给任务分配资源。还有其他多个<span class="literal">master</span>被选举成备用的<span class="literal">master</span>（standBy）,它不提供服务。</span><br><span class="line">当前活着的<span class="literal">master</span>挂掉了，首先zk会感知到，接下来在所有处于standBy中的<span class="literal">master</span>进行选举，最后生成一个活着的<span class="literal">master</span>，后期需要从zk集群中读取保存了spark集群的元数据节点spark。最后恢复到上一次<span class="literal">master</span>的状态，整个恢复需要一定的时间，一般就是<span class="number">1</span>-<span class="number">2</span>分钟。</span><br><span class="line"></span><br><span class="line">整个spark集群<span class="literal">master</span>正处于恢复阶段，对任务有没有影响？</span><br><span class="line"></span><br><span class="line">（<span class="number">1</span>）对于正在运行的任务有没有影响，没有影响。</span><br><span class="line">由于任务正在运行，就说明它已经获取得到了资源，既然有资源了，就跟<span class="literal">master</span>没有关系，任务可以继续运行。这里就是没有任何影响</span><br><span class="line"></span><br><span class="line">   （<span class="number">2</span>）对于正准备提交的任务有没有影响，有影响。</span><br><span class="line">       由于没有这样一个活着的<span class="literal">master</span>去分配资源，也就说任务获取不到资源，既然没有资源，任务也就无法运行，必须等到活着的<span class="literal">master</span>出现之后，才可以申请到资源。</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="7、spark集群架构"><a href="#7、spark集群架构" class="headerlink" title="7、spark集群架构"></a>7、spark集群架构</h4><p><img src="/blog/2019/03/09/spark基础/spark.png" alt></p><ul><li>1、Driver端<ul><li>它会运行客户端的main方法和构建SparkContext对象，SparkContext对象是所有spark程序的执行入口</li></ul></li><li>2、Application<ul><li>它就是一个spark的应用程序，包括了Driver的代码和任务运行的时候需要的资源信息</li></ul></li><li>3、ClusterManager<ul><li>它是给计算任务提供计算资源的外部服务<ul><li>standAlone<ul><li>它是spark集群自带的模式，任务的资源分配由老大Master节点负责</li></ul></li><li>yarn<ul><li>可以把spark程序提交到yarn中去运行，任务的资源分配由yarn中老大ResourceManager负责</li></ul></li><li>mesos<ul><li>它也是一个类似于yarn资源调度平台</li></ul></li></ul></li></ul></li><li>4、Master<ul><li>它是整个spark集群的老大，负责资源的分配</li></ul></li><li>5、Worker<ul><li>它是整个spark集群的小弟，负责任务的计算节点</li></ul></li><li>6、Executor<ul><li>它是一个进程，在这里表示计算的资源<ul><li>它会在worker节点启动executor进程</li></ul></li></ul></li><li>7、task<ul><li>它就是一个线程<ul><li>它是以task线程的方式运行在worker节点对应的executor进程中</li></ul></li></ul></li></ul><h4 id="8、初识spark程序"><a href="#8、初识spark程序" class="headerlink" title="8、初识spark程序"></a>8、初识spark程序</h4><ul><li><p>1、普通模式提交任务（就是我们已经知道了集群中活着的master地址）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bin/spark-submit \</span><br><span class="line">--class org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.examples</span><span class="selector-class">.SparkPi</span> \</span><br><span class="line">--master spark:<span class="comment">//node-1:7077 \</span></span><br><span class="line">--executor-memory <span class="number">1</span>G \</span><br><span class="line">--total-executor-cores <span class="number">2</span> \</span><br><span class="line">examples/jars/spark-examples_2.<span class="number">11</span>-<span class="number">2.1</span>.<span class="number">3</span><span class="selector-class">.jar</span> \</span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure></li><li><p>2、高可用模式下提交任务（就是集群中有很多个master，这个时候我也不知道哪一个master是活着的master）</p><figure class="highlight shell"><figcaption><span>code here</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">bin/spark-submit \</span><br><span class="line">--class org.apache.spark.examples.SparkPi \</span><br><span class="line">--master spark://node-1:7077,node-2:7077,node-3:7077 \</span><br><span class="line">--executor-memory 1G \</span><br><span class="line">--total-executor-cores 2 \</span><br><span class="line">examples/jars/spark-examples_2.11-2.1.3.jar \</span><br><span class="line">100</span><br><span class="line"></span><br><span class="line">后期再实际环境中，有很多个master，任务的提交需要找到活着的master去申请资源，这个时候我们不知道哪一个master是活着的master，这里我们就可以把所有的master都罗列出来：</span><br><span class="line">--master spark://node1:7077,node2:7077,node3:7077</span><br><span class="line">后期程序在运行的时候，它会通过轮训的机制最后找到活着的master，然后向活着的master申请计算资源。</span><br></pre></td></tr></table></figure></li></ul><h4 id="9、spark-shell使用"><a href="#9、spark-shell使用" class="headerlink" title="9、spark-shell使用"></a>9、spark-shell使用</h4><h5 id="9-1-通过spark-shell-–master-local-N-读取本地数据文件实现单词统计"><a href="#9-1-通过spark-shell-–master-local-N-读取本地数据文件实现单词统计" class="headerlink" title="9.1 通过spark-shell –master local[N] 读取本地数据文件实现单词统计"></a>9.1 通过spark-shell –master local[N] 读取本地数据文件实现单词统计</h5><ul><li><p>–master local[N]</p><ul><li>local表示本地运行，跟spark集群没有任何关系</li><li>N表示一个正整数，在这里local[N] 表示本地采用N个线程去跑任务</li></ul></li><li><p>spark-shell –master local[2]</p></li><li><p>代码</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sc.textFile(<span class="string">"file:///root/words.txt"</span>).flatMap(x=&gt;x.split(<span class="string">" "</span>)).map(x=&gt;(x,<span class="number">1</span>)).reduceByKey((x,y)=&gt;x+y).collect</span><br><span class="line"></span><br><span class="line">sc.textFile(<span class="string">"file:///root/words.txt"</span>).flatMap(_.split(<span class="string">" "</span>)).map((_,<span class="number">1</span>)).reduceByKey(_+_).collect</span><br></pre></td></tr></table></figure></li></ul><h5 id="9-2-通过spark-shell-–master-local-N-读取HDFS数据文件实现单词统计"><a href="#9-2-通过spark-shell-–master-local-N-读取HDFS数据文件实现单词统计" class="headerlink" title="9.2 通过spark-shell –master local[N] 读取HDFS数据文件实现单词统计"></a>9.2 通过spark-shell –master local[N] 读取HDFS数据文件实现单词统计</h5><ul><li><p>spark整合HDFS</p><ul><li>vim spark-env.sh</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#spark整合HDFS</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">HADOOP_CONF_DIR</span>=/export/servers/hadoop/etc/hadoop</span><br></pre></td></tr></table></figure></li><li><p>spark-shell –master local[2]</p></li><li><p>代码</p></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sc.textFile(<span class="string">"hdfs://node1:9000/words.txt"</span>).flatMap(_.split(<span class="string">" "</span>)).map((_,<span class="number">1</span>)).reduceByKey(_+_).collect</span><br><span class="line"></span><br><span class="line">xsc.textFile(<span class="string">"/words.txt"</span>).flatMap(_.split(<span class="string">" "</span>)).map((_,<span class="number">1</span>)).reduceByKey(_+_).collect</span><br></pre></td></tr></table></figure><h5 id="9-3-通过spark-shell-指定具体活着的master实现HDFS上文件单词统计，把结果数据保存到hdfs上"><a href="#9-3-通过spark-shell-指定具体活着的master实现HDFS上文件单词统计，把结果数据保存到hdfs上" class="headerlink" title="9.3 通过spark-shell 指定具体活着的master实现HDFS上文件单词统计，把结果数据保存到hdfs上"></a>9.3 通过spark-shell 指定具体活着的master实现HDFS上文件单词统计，把结果数据保存到hdfs上</h5><ul><li>spark-shell –master spark://node2:7077 –executor-memory 1g  –total-executor-cores 4</li><li>代码</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc.textFile(<span class="string">"/words.txt"</span>).flatMap(_.split(<span class="string">" "</span>)).map((_,<span class="number">1</span>)).reduceByKey(_+_).saveAsTextFile(<span class="string">"/out"</span>)</span><br></pre></td></tr></table></figure><h4 id="10、通过IDEA开发spark的程序"><a href="#10、通过IDEA开发spark的程序" class="headerlink" title="10、通过IDEA开发spark的程序"></a>10、通过IDEA开发spark的程序</h4><h5 id="10-1-利用scala语言开发spark的wordcount程序（本地运行）"><a href="#10-1-利用scala语言开发spark的wordcount程序（本地运行）" class="headerlink" title="10.1 利用scala语言开发spark的wordcount程序（本地运行）"></a>10.1 利用scala语言开发spark的wordcount程序（本地运行）</h5><ul><li>1、引入依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-core_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>2、代码开发</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.spark</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//todo:利用scala语言开发spark的wordcount程序（本地运行）</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">WordCount</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">       <span class="comment">//1、创建SparkConf对象 设置application名称和master地址  local[2]表示本地采用2个线程跑任务</span></span><br><span class="line">        <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">"WordCount"</span>).setMaster(<span class="string">"local[2]"</span>)</span><br><span class="line"></span><br><span class="line">      <span class="comment">//2、创建SparkContext对象 它是所有spark程序的执行入口，它内部会构建DAGScheduler和TaskScheduler</span></span><br><span class="line">       <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">          <span class="comment">//设置日志输出级别</span></span><br><span class="line">          sc.setLogLevel(<span class="string">"warn"</span>)</span><br><span class="line"></span><br><span class="line">     <span class="comment">//3、读取数据文件</span></span><br><span class="line">       <span class="keyword">val</span> data: <span class="type">RDD</span>[<span class="type">String</span>] = sc.textFile(<span class="string">"E:\\words.txt"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4、切分每一行，获取所有的单词</span></span><br><span class="line">      <span class="keyword">val</span> words: <span class="type">RDD</span>[<span class="type">String</span>] = data.flatMap(x=&gt;x.split(<span class="string">" "</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5、把每个单词计为1</span></span><br><span class="line">      <span class="keyword">val</span> wordAndOne: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = words.map(x=&gt;(x,<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6、相同单词出现的1累加</span></span><br><span class="line">      <span class="keyword">val</span> result: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = wordAndOne.reduceByKey((x:<span class="type">Int</span>,y:<span class="type">Int</span>)=&gt;x+y)</span><br><span class="line"></span><br><span class="line">       <span class="comment">//按照单词出现的次数降序排列 默认第二个参数是true表示升序，改为false为降序</span></span><br><span class="line">        <span class="keyword">val</span> sortRDD: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = result.sortBy(x=&gt;x._2,<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7、收集打印</span></span><br><span class="line">       <span class="keyword">val</span> finalResult: <span class="type">Array</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = sortRDD.collect()</span><br><span class="line">        finalResult.foreach(println)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//8、关闭</span></span><br><span class="line">      sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-2-利用scala语言开发spark的wordcount程序（集群运行）"><a href="#10-2-利用scala语言开发spark的wordcount程序（集群运行）" class="headerlink" title="10.2 利用scala语言开发spark的wordcount程序（集群运行）"></a>10.2 利用scala语言开发spark的wordcount程序（集群运行）</h5><ul><li>1、代码开发</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.spark</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//todo:利用scala语言开发spark的wordcount程序（集群运行）</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">WordCount_Online</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//1、创建SparkConf对象 设置application名称</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">"WordCount_Online"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、创建SparkContext对象 它是所有spark程序的执行入口，它内部会构建DAGScheduler和TaskScheduler</span></span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置日志输出级别</span></span><br><span class="line">    sc.setLogLevel(<span class="string">"warn"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3、读取数据文件</span></span><br><span class="line">    <span class="keyword">val</span> data: <span class="type">RDD</span>[<span class="type">String</span>] = sc.textFile(args(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4、切分每一行，获取所有的单词</span></span><br><span class="line">    <span class="keyword">val</span> words: <span class="type">RDD</span>[<span class="type">String</span>] = data.flatMap(x=&gt;x.split(<span class="string">" "</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5、把每个单词计为1</span></span><br><span class="line">    <span class="keyword">val</span> wordAndOne: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = words.map(x=&gt;(x,<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6、相同单词出现的1累加</span></span><br><span class="line">    <span class="keyword">val</span> result: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = wordAndOne.reduceByKey((x:<span class="type">Int</span>,y:<span class="type">Int</span>)=&gt;x+y)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7、把结果数据保存到hdfs上</span></span><br><span class="line">      result.saveAsTextFile(args(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//8、关闭</span></span><br><span class="line">    sc.stop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>2、把程序打成jar包提交到spark集群中运行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spark-submit \</span><br><span class="line">--master spark://node-1:7077 \</span><br><span class="line">--class cn.itcast.spark.WordCount_Online \ #jar包的main方法路径</span><br><span class="line">--executor-memory 1G \</span><br><span class="line">--total-executor-cores 2 \</span><br><span class="line">original-spark_demo-1.0-SNAPSHOT.jar \  #需要在当前路径上有才能这么些，否则需要写全路径</span><br><span class="line">/words.txt /out_spark</span><br></pre></td></tr></table></figure><h5 id="10-3-利用java语言开发spark的wordcount程序（本地运行）"><a href="#10-3-利用java语言开发spark的wordcount程序（本地运行）" class="headerlink" title="10.3 利用java语言开发spark的wordcount程序（本地运行）"></a>10.3 利用java语言开发spark的wordcount程序（本地运行）</h5><ul><li>1、代码开发</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.spark;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.SparkConf;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.JavaPairRDD;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.JavaRDD;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.JavaSparkContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.function.FlatMapFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.function.Function2;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.function.PairFunction;</span><br><span class="line"><span class="keyword">import</span> scala.Tuple2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//todo:利用java语言开发spark的wordcount程序（本地运行）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCount_Java</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         <span class="comment">//1、创建SparkConf</span></span><br><span class="line">        SparkConf sparkConf = <span class="keyword">new</span> SparkConf().setAppName(<span class="string">"WordCount_Java"</span>).setMaster(<span class="string">"local[2]"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、创建JavaSparkContext</span></span><br><span class="line">        JavaSparkContext jsc = <span class="keyword">new</span> JavaSparkContext(sparkConf);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、读取数据文件</span></span><br><span class="line">        JavaRDD&lt;String&gt; data = jsc.textFile(<span class="string">"E:\\words.txt"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、切分每一行获取所有的单词</span></span><br><span class="line">        JavaRDD&lt;String&gt; words = data.flatMap(<span class="keyword">new</span> FlatMapFunction&lt;String, String&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Iterator&lt;String&gt; <span class="title">call</span><span class="params">(String line)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                String[] words = line.split(<span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> Arrays.asList(words).iterator();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5、每个单词计为1 （单词，1）</span></span><br><span class="line">        JavaPairRDD&lt;String, Integer&gt; wordAndOne = words.mapToPair(<span class="keyword">new</span> PairFunction&lt;String, String, Integer&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Tuple2&lt;String, Integer&gt; <span class="title">call</span><span class="params">(String word)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Tuple2&lt;String, Integer&gt;(word, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6、相同单词出现的1累加</span></span><br><span class="line">        JavaPairRDD&lt;String, Integer&gt; result = wordAndOne.reduceByKey(<span class="keyword">new</span> Function2&lt;Integer, Integer, Integer&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">(Integer v1, Integer v2)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> v1 + v2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//按照单词出现的次数降序排列   (单词，次数)-------&gt;(次数，单词).sortByKey-------&gt;(单词，次数)</span></span><br><span class="line">        JavaPairRDD&lt;Integer, String&gt; reverseRDD = result.mapToPair(<span class="keyword">new</span> PairFunction&lt;Tuple2&lt;String, Integer&gt;, Integer, String&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Tuple2&lt;Integer, String&gt; <span class="title">call</span><span class="params">(Tuple2&lt;String, Integer&gt; t)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Tuple2&lt;Integer, String&gt;(t._2, t._1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        JavaPairRDD&lt;String, Integer&gt; sortedRDD = reverseRDD.sortByKey(<span class="keyword">false</span>).mapToPair(<span class="keyword">new</span> PairFunction&lt;Tuple2&lt;Integer, String&gt;, String, Integer&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Tuple2&lt;String, Integer&gt; <span class="title">call</span><span class="params">(Tuple2&lt;Integer, String&gt; t)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Tuple2&lt;String, Integer&gt;(t._2, t._1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//7、收集打印</span></span><br><span class="line">        List&lt;Tuple2&lt;String, Integer&gt;&gt; finalResult = sortedRDD.collect();</span><br><span class="line">        <span class="keyword">for</span> (Tuple2&lt;String, Integer&gt; tuple : finalResult) &#123;</span><br><span class="line">            System.out.println(<span class="string">"单词："</span>+tuple._1+<span class="string">" 次数："</span>+tuple._2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//8、关闭</span></span><br><span class="line">        jsc.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
          <category> spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
